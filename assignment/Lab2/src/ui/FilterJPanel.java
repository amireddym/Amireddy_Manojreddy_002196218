/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Car;
import model.CarsInformation;
import model.City;
import model.LeaseType;
import model.Manufacturer;

/**
 *
 * @author manojreddy
 */
public class FilterJPanel extends javax.swing.JPanel {

    /**
     * Creates new form FilterJPanel
     */
    
    private CarsInformation carsInformation;
    
    public FilterJPanel() {
        initComponents();
    }
    
    public FilterJPanel(CarsInformation carsInformation) {
        this.carsInformation = carsInformation;
        initComponents();
        initializeUI();
        userSelectedJPanel.setVisible(false);
        populateTable();
    }
    
    private void populateTable(){
        
        DefaultTableModel model = (DefaultTableModel) viewCarsTable.getModel();
        model.setRowCount(0);
        for(Car car:carsInformation.getCars()){
            
            Object[] row = new Object[12];
            row[0] = car;
            row[1] = car.isAvailability();
            row[2] = car.getManufacturer().name();
            row[3] = car.getManufacturedYear();
            row[4] = car.getSeatCapacity();
            row[5] = car.getSerialNumber();
            row[6] = car.getModelNumber();
            row[7] = formatDate(car.getCreatedDate());
            row[8] = formatDate(car.getLastUpdated());            
            row[9] = car.getOperatingCity().toString();
            row[10] = car.isMaintainanceCertificateExpired();
            row[11] = car.getLeaseType().toString();
            
            model.addRow(row);
        }
        filteredLastUpdatedJTextField.setText(formatDate(carsInformation.getLastUpdatedOn()));
        countDataJLabel.setText(String.valueOf(carsInformation.getCars().size()));
    }
    
    private String formatDate(Date date){
       
        String pattern = "yyyy-MM-dd HH:mm:ss";
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);

        return simpleDateFormat.format(date);
    }    
    
    private void initializeUI() {
        
        manufactureJList.setListData(Manufacturer.getManufactureArray());
        cityJComboBox.addItem("All");
        leaseTypeJComboBox.addItem("All");
        
        String[] operatingCities = City.getOperatingCitiesArray();
        for(String city:operatingCities){
            cityJComboBox.addItem(city);
        }
        
        String[] leaseTypes = LeaseType.getAllLeaseTypes();
        for(String leaseType:leaseTypes){
            leaseTypeJComboBox.addItem(leaseType);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        filterHeaderDisplayJLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewCarsTable = new javax.swing.JTable();
        fleetUpdatedJLabel = new javax.swing.JLabel();
        availabilityJLabel = new javax.swing.JLabel();
        availablilityJComboBox = new javax.swing.JComboBox<>();
        manufacturedYrJLabel = new javax.swing.JLabel();
        manufacturedYrTextField = new javax.swing.JTextField();
        manufacturerJLabel = new javax.swing.JLabel();
        seatCapacityJLabel = new javax.swing.JLabel();
        seatCapacityJTextField = new javax.swing.JTextField();
        serialNoJLabel = new javax.swing.JLabel();
        serialNoJLabel1 = new javax.swing.JLabel();
        serialNoJTextField = new javax.swing.JTextField();
        modelNoJTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cityJComboBox = new javax.swing.JComboBox<>();
        maintainanceJComboBox = new javax.swing.JComboBox<>();
        searchJButton = new javax.swing.JButton();
        distanceJLabel = new javax.swing.JLabel();
        distanceJCheckBox = new javax.swing.JCheckBox();
        limitJLabel = new javax.swing.JLabel();
        limitJTextField = new javax.swing.JTextField();
        viewJButton = new javax.swing.JButton();
        userSelectedJPanel = new javax.swing.JPanel();
        currentDistanceJLabel = new javax.swing.JLabel();
        currentDistanceJTextField = new javax.swing.JTextField();
        seatCapacityJLabel1 = new javax.swing.JLabel();
        seatCapacitySelectedJTextField = new javax.swing.JTextField();
        availabilityJLabel1 = new javax.swing.JLabel();
        availabilityJCheckBox = new javax.swing.JCheckBox();
        serialNoJLabel2 = new javax.swing.JLabel();
        serialNoJTextField1 = new javax.swing.JTextField();
        modelNoJLabel = new javax.swing.JLabel();
        modelNoJTextField1 = new javax.swing.JTextField();
        manufacturerJLabel1 = new javax.swing.JLabel();
        manufacturedYrJLabel1 = new javax.swing.JLabel();
        manufacturedYrJTextField = new javax.swing.JTextField();
        maintainanceExperiedJLabel = new javax.swing.JLabel();
        operatingCityJLabel = new javax.swing.JLabel();
        maintainanceExpiryJCheckBox = new javax.swing.JCheckBox();
        manufactureJComboBox = new javax.swing.JComboBox<>();
        operatingCityJComboBox = new javax.swing.JComboBox<>();
        updateJButton = new javax.swing.JButton();
        leaseTypeSelectedJLabel = new javax.swing.JLabel();
        leaseTypeSelectedJComboBox = new javax.swing.JComboBox<>();
        seatCapacityMaxJLabel = new javax.swing.JLabel();
        seatCapacityMaxJTextField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        manufactureJList = new javax.swing.JList<>();
        resetJButton1 = new javax.swing.JButton();
        lastUpdatedFilteredJLabel = new javax.swing.JLabel();
        filteredLastUpdatedJTextField = new javax.swing.JLabel();
        deleteJButton = new javax.swing.JButton();
        countJLabel = new javax.swing.JLabel();
        countDataJLabel = new javax.swing.JLabel();
        leaseTypeJLabel = new javax.swing.JLabel();
        leaseTypeJComboBox = new javax.swing.JComboBox<>();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        filterHeaderDisplayJLabel.setFont(new java.awt.Font("Kokonor", 1, 18)); // NOI18N
        filterHeaderDisplayJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        filterHeaderDisplayJLabel.setText("Filter data by using the Below fields");

        viewCarsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Distance", "Availability", "Manufacturer", "Manufactured-Yr", "Seat Capacity", "Serial No", "Model No", "Created On", "Updated On", "City", "Maintaince Cert Exp", "Lease Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        viewCarsTable.getTableHeader().setReorderingAllowed(false);
        viewCarsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewCarsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(viewCarsTable);

        fleetUpdatedJLabel.setText("Fleet Last Updated On :");

        availabilityJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        availabilityJLabel.setText("Availability :");

        availablilityJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Yes", "No" }));

        manufacturedYrJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        manufacturedYrJLabel.setText("Manufactured Yr:");

        manufacturedYrTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                manufacturedYrTextFieldKeyReleased(evt);
            }
        });

        manufacturerJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        manufacturerJLabel.setText("Manufacturer :");

        seatCapacityJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        seatCapacityJLabel.setText("Seat (Min) :");

        seatCapacityJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                seatCapacityJTextFieldKeyReleased(evt);
            }
        });

        serialNoJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        serialNoJLabel.setText("Serial No:");

        serialNoJLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        serialNoJLabel1.setText("Model No:");

        serialNoJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                serialNoJTextFieldKeyReleased(evt);
            }
        });

        modelNoJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                modelNoJTextFieldKeyReleased(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("City :");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Main Exp :");

        maintainanceJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Yes", "No" }));

        searchJButton.setText("Search");
        searchJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchJButtonActionPerformed(evt);
            }
        });

        distanceJLabel.setText("Distance Asc:");

        limitJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        limitJLabel.setText("Limit :");

        limitJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                limitJTextFieldKeyReleased(evt);
            }
        });

        viewJButton.setText("View");
        viewJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewJButtonActionPerformed(evt);
            }
        });

        userSelectedJPanel.setBackground(new java.awt.Color(102, 255, 255));

        currentDistanceJLabel.setText("Current Distance:");

        currentDistanceJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                currentDistanceJTextFieldKeyReleased(evt);
            }
        });

        seatCapacityJLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        seatCapacityJLabel1.setText("Seat Capacity:");

        seatCapacitySelectedJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                seatCapacitySelectedJTextFieldKeyReleased(evt);
            }
        });

        availabilityJLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        availabilityJLabel1.setText("Availability:");

        serialNoJLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        serialNoJLabel2.setText("Serial No:");

        serialNoJTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                serialNoJTextField1KeyReleased(evt);
            }
        });

        modelNoJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        modelNoJLabel.setText("Model No:");

        modelNoJTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                modelNoJTextField1KeyReleased(evt);
            }
        });

        manufacturerJLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        manufacturerJLabel1.setText("Manufacturer:");

        manufacturedYrJLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        manufacturedYrJLabel1.setText("Manufactured Yr:");

        manufacturedYrJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                manufacturedYrJTextFieldKeyReleased(evt);
            }
        });

        maintainanceExperiedJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        maintainanceExperiedJLabel.setText("Maintainance Exp:");

        operatingCityJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        operatingCityJLabel.setText("Operating City:");

        updateJButton.setText("Update");
        updateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateJButtonActionPerformed(evt);
            }
        });

        leaseTypeSelectedJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        leaseTypeSelectedJLabel.setText("Lease Type:");

        javax.swing.GroupLayout userSelectedJPanelLayout = new javax.swing.GroupLayout(userSelectedJPanel);
        userSelectedJPanel.setLayout(userSelectedJPanelLayout);
        userSelectedJPanelLayout.setHorizontalGroup(
            userSelectedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userSelectedJPanelLayout.createSequentialGroup()
                .addGroup(userSelectedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userSelectedJPanelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(userSelectedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(userSelectedJPanelLayout.createSequentialGroup()
                                .addComponent(currentDistanceJLabel)
                                .addGap(18, 18, 18)
                                .addComponent(currentDistanceJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(userSelectedJPanelLayout.createSequentialGroup()
                                .addGroup(userSelectedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(leaseTypeSelectedJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(userSelectedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(manufacturedYrJLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(serialNoJLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(userSelectedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(userSelectedJPanelLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(userSelectedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(serialNoJTextField1)
                                            .addComponent(manufacturedYrJTextField)))
                                    .addGroup(userSelectedJPanelLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(leaseTypeSelectedJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addGap(128, 128, 128)
                        .addGroup(userSelectedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(userSelectedJPanelLayout.createSequentialGroup()
                                .addGroup(userSelectedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(modelNoJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(seatCapacityJLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(userSelectedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(modelNoJTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(seatCapacitySelectedJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(userSelectedJPanelLayout.createSequentialGroup()
                                .addComponent(maintainanceExperiedJLabel)
                                .addGap(18, 18, 18)
                                .addComponent(maintainanceExpiryJCheckBox)))
                        .addGap(56, 56, 56)
                        .addGroup(userSelectedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(userSelectedJPanelLayout.createSequentialGroup()
                                .addComponent(operatingCityJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(operatingCityJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(userSelectedJPanelLayout.createSequentialGroup()
                                .addComponent(availabilityJLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(availabilityJCheckBox))
                            .addGroup(userSelectedJPanelLayout.createSequentialGroup()
                                .addComponent(manufacturerJLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(manufactureJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(userSelectedJPanelLayout.createSequentialGroup()
                        .addGap(443, 443, 443)
                        .addComponent(updateJButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        userSelectedJPanelLayout.setVerticalGroup(
            userSelectedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userSelectedJPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(userSelectedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(availabilityJCheckBox)
                    .addGroup(userSelectedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(currentDistanceJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(currentDistanceJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(seatCapacityJLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(seatCapacitySelectedJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(availabilityJLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(userSelectedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serialNoJLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serialNoJTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modelNoJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modelNoJTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manufacturerJLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manufactureJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(userSelectedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userSelectedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(operatingCityJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(operatingCityJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(userSelectedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(manufacturedYrJLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(manufacturedYrJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(maintainanceExperiedJLabel)
                        .addComponent(maintainanceExpiryJCheckBox)))
                .addGap(18, 18, 18)
                .addGroup(userSelectedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(leaseTypeSelectedJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(leaseTypeSelectedJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(updateJButton)
                .addGap(14, 14, 14))
        );

        seatCapacityMaxJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        seatCapacityMaxJLabel.setText("Seat (Max) :");

        seatCapacityMaxJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                seatCapacityMaxJTextFieldKeyReleased(evt);
            }
        });

        jScrollPane3.setViewportView(manufactureJList);

        resetJButton1.setText("Reset");
        resetJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetJButton1ActionPerformed(evt);
            }
        });

        lastUpdatedFilteredJLabel.setText("Filtered Data Last Updated:");

        deleteJButton.setText("Delete");
        deleteJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteJButtonActionPerformed(evt);
            }
        });

        countJLabel.setText("Count :");

        countDataJLabel.setText("0");

        leaseTypeJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        leaseTypeJLabel.setText("Lease Type :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(filterHeaderDisplayJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(serialNoJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(availabilityJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(manufacturedYrJLabel)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(availablilityJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(manufacturedYrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(seatCapacityJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(manufacturerJLabel)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(serialNoJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(leaseTypeJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(seatCapacityJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(leaseTypeJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(seatCapacityMaxJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(searchJButton)
                                    .addComponent(serialNoJLabel1))
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(seatCapacityMaxJTextField)
                                    .addComponent(modelNoJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addComponent(resetJButton1)))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cityJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maintainanceJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(distanceJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(limitJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(distanceJCheckBox)
                    .addComponent(limitJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(66, 220, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lastUpdatedFilteredJLabel)
                .addGap(39, 39, 39)
                .addComponent(filteredLastUpdatedJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96)
                .addComponent(countJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(countDataJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(viewJButton)
                .addGap(18, 18, 18)
                .addComponent(deleteJButton)
                .addGap(26, 26, 26))
            .addGroup(layout.createSequentialGroup()
                .addComponent(userSelectedJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(407, 407, 407)
                    .addComponent(fleetUpdatedJLabel)
                    .addContainerGap(761, Short.MAX_VALUE)))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {filteredLastUpdatedJTextField, lastUpdatedFilteredJLabel});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(filterHeaderDisplayJLabel)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(13, 13, 13)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(availabilityJLabel)
                                .addComponent(availablilityJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(manufacturerJLabel)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(seatCapacityMaxJLabel))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(distanceJCheckBox)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(cityJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(distanceJLabel)
                                    .addComponent(seatCapacityMaxJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(1, 1, 1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(manufacturedYrJLabel)
                        .addComponent(manufacturedYrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(seatCapacityJLabel)
                        .addComponent(seatCapacityJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(serialNoJLabel1)
                        .addComponent(modelNoJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(maintainanceJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(limitJLabel))
                    .addComponent(limitJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(serialNoJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(serialNoJLabel)
                        .addComponent(resetJButton1)
                        .addComponent(leaseTypeJLabel)
                        .addComponent(leaseTypeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(searchJButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(viewJButton)
                        .addComponent(countJLabel)
                        .addComponent(countDataJLabel))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lastUpdatedFilteredJLabel)
                        .addComponent(filteredLastUpdatedJTextField)
                        .addComponent(deleteJButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userSelectedJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(259, 259, 259)
                    .addComponent(fleetUpdatedJLabel)
                    .addContainerGap(446, Short.MAX_VALUE)))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {filteredLastUpdatedJTextField, lastUpdatedFilteredJLabel});

    }// </editor-fold>//GEN-END:initComponents

    private void searchJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchJButtonActionPerformed
        // TODO add your handling code here:
        
        userSelectedJPanel.setVisible(false);
        if(isSearchValid()){
        
            List<Car> carsFiltered = getFilteredCars();
            if(distanceJCheckBox.isSelected()){
                Collections.sort(carsFiltered);
            }
            if(!limitJTextField.getText().isBlank()){
                populateFilteredData(carsFiltered.subList(0, Integer.valueOf(limitJTextField.getText().replace(" ", ""))));
            }else{
                populateFilteredData(carsFiltered);
            }
        }else{
            JOptionPane.showMessageDialog(this, "Please enter valid Inputs");
        }
    }//GEN-LAST:event_searchJButtonActionPerformed

    private boolean isSearchValid(){
        
        if(isSearchedManufacturedYrValid() && isSearchedModelNoValid() && isSearchedSerialNoValid() && 
                isSeatMaxValid() && isSeatMaxValid() && isLimitValid()){
            return true;
        }
        return false;
    }
    
    private void populateFilteredData(List<Car> cars){
        
        DefaultTableModel model = (DefaultTableModel) viewCarsTable.getModel();
        model.setRowCount(0);
        Date filterDataLastUpdated = null;

        for(Car car:cars){
            
            Object[] row = new Object[12];
            row[0] = car;
            row[1] = car.isAvailability();
            row[2] = car.getManufacturer().name();
            row[3] = car.getManufacturedYear();
            row[4] = car.getSeatCapacity();
            row[5] = car.getSerialNumber();
            row[6] = car.getModelNumber();
            row[7] = formatDate(car.getCreatedDate());
            row[8] = formatDate(car.getLastUpdated());            
            row[9] = car.getOperatingCity().toString();
            row[10] = car.isMaintainanceCertificateExpired();
            row[11] = car.getLeaseType().toString();
            
            if(filterDataLastUpdated==null) {
                filterDataLastUpdated = car.getLastUpdated();
            }else {
                if(car.getLastUpdated().after(filterDataLastUpdated)){
                    filterDataLastUpdated = car.getLastUpdated();
                }
            }
            
            model.addRow(row);
        }
        if(filterDataLastUpdated == null){
            filteredLastUpdatedJTextField.setText("");
            countDataJLabel.setText("0");
            return;
        }
        filteredLastUpdatedJTextField.setText(formatDate(filterDataLastUpdated));
        countDataJLabel.setText(String.valueOf(cars.size()));
    }
    
    private List<Car> getFilteredCars() {
        
        List<Car> carsFiltered = new ArrayList<>();
        for(Car car:carsInformation.getCars()){
            
            if((availablilityJComboBox.getSelectedIndex()==1 && (car.isAvailability()==false)) ||
                    (availablilityJComboBox.getSelectedIndex()==2 && (car.isAvailability()==true))){
                continue;
            }
            if( !manufacturedYrTextField.getText().isBlank()  && !car.getManufacturedYear().contentEquals(manufacturedYrTextField.getText().replace(" ", ""))){
                continue;
            }
            if( !serialNoJTextField.getText().isBlank() && !car.getSerialNumber().contentEquals(serialNoJTextField.getText().replace(" ",""))){
                continue;
            }
            if( !modelNoJTextField.getText().isBlank() && !car.getModelNumber().contentEquals(modelNoJTextField.getText().replace(" ",""))){
                continue;
            }
            if((maintainanceJComboBox.getSelectedIndex()==1 && (car.isMaintainanceCertificateExpired()==false)) ||
                    (maintainanceJComboBox.getSelectedIndex()==2 && (car.isMaintainanceCertificateExpired()==true))){
                continue;
            }
            if(!seatCapacityJTextField.getText().isBlank() && (car.getSeatCapacity() < Integer.valueOf(seatCapacityJTextField.getText().replace(" ","")))){
                continue;
            }
            if(!seatCapacityMaxJTextField.getText().isBlank() && (car.getSeatCapacity() > Integer.valueOf(seatCapacityMaxJTextField.getText().replace(" ","")))){
                continue;
            }
            if(cityJComboBox.getSelectedIndex()!=0 && !car.getOperatingCity().toString().contentEquals((String)cityJComboBox.getSelectedItem())){
                continue;
            }
            if(leaseTypeJComboBox.getSelectedIndex()!=0 && !car.getLeaseType().toString().contentEquals((String) leaseTypeJComboBox.getSelectedItem())){
                continue;
            }
            if(manufactureJList.getSelectedValuesList().size()!=0 && !manufactureJList.getSelectedValuesList().contains(car.getManufacturer().toString())){
                continue;
            }
            carsFiltered.add(car);
        }
        
        return carsFiltered;
    }
    
    private void viewJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewJButtonActionPerformed
        // TODO add your handling code here:
        int userSelectedIndex = viewCarsTable.getSelectedRow();
        if(userSelectedIndex <0){
            JOptionPane.showMessageDialog(this, "Please Select any Car to View");
            return;
        }
        displaySelectedCarData(userSelectedIndex);
    }//GEN-LAST:event_viewJButtonActionPerformed

    private void viewCarsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewCarsTableMouseClicked
        // TODO add your handling code here:
        viewJButtonActionPerformed(null);
    }//GEN-LAST:event_viewCarsTableMouseClicked

    private void resetJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetJButton1ActionPerformed
        // TODO add your handling code here:
        
        JOptionPane.showMessageDialog(this, "Resetting all Filters");
        userSelectedJPanel.setVisible(false);
        resetFilters();
        populateTable();
    }//GEN-LAST:event_resetJButton1ActionPerformed

    private void deleteJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteJButtonActionPerformed
        // TODO add your handling code here:
        int userSelectedIndex = viewCarsTable.getSelectedRow();
        if(userSelectedIndex <0){
            JOptionPane.showMessageDialog(this, "Please Select any Car to Delete");
            return;
        }
        deleteSelectedCarData(userSelectedIndex);
    }//GEN-LAST:event_deleteJButtonActionPerformed

    private void updateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateJButtonActionPerformed
        // TODO add your handling code here:
        
        currentDistanceJTextFieldKeyReleased(null);
        serialNoJTextField1KeyReleased(null);
        manufacturedYrJTextFieldKeyReleased(null);
        seatCapacitySelectedJTextFieldKeyReleased(null);
        modelNoJTextField1KeyReleased(null);
        
        if(isDataEnteredValid()){
        
            if(!isDataUpdatedByUser()){

                if(isSerialNounique()){
                    setUpdatedData();   
                    int selectedRow = viewCarsTable.getSelectedRow();
                    searchJButtonActionPerformed(null);
                    if(selectedRow >=0){
                        viewCarsTable.setRowSelectionInterval(selectedRow, selectedRow);
                    }
                    JOptionPane.showMessageDialog(this, "Changes has been Successfully saved");
                }else {
                    JOptionPane.showMessageDialog(this, "Changes not Saved. Serial No already Existed");                                
                }
            }else{
                JOptionPane.showMessageDialog(this, "No changes has been made");
            }
        }else{
            JOptionPane.showMessageDialog(this, "Please enter valid data");
        }
    }//GEN-LAST:event_updateJButtonActionPerformed

    private boolean isDataEnteredValid() {
        
        if(isDistanceValid() && isSeatCapacityValid() && isSerialNoValid() &&
                isModelNoValid() && isManufacturedYrValid()){
            return true;
        }
        return false;
    }
    
    private void currentDistanceJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_currentDistanceJTextFieldKeyReleased
        // TODO add your handling code here:
        if(isDistanceValid()) {
            currentDistanceJTextField.setBackground(Color.WHITE);
        }else{
            currentDistanceJTextField.setBackground(Color.RED);
        }
    }//GEN-LAST:event_currentDistanceJTextFieldKeyReleased

    private void serialNoJTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_serialNoJTextField1KeyReleased
        // TODO add your handling code here:
        if(isSerialNoValid()){
            serialNoJTextField1.setBackground(Color.WHITE);
        }else{
            serialNoJTextField1.setBackground(Color.RED);
        }
    }//GEN-LAST:event_serialNoJTextField1KeyReleased

    private void manufacturedYrJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_manufacturedYrJTextFieldKeyReleased
        // TODO add your handling code here:
        if(isManufacturedYrValid()){
            manufacturedYrJTextField.setBackground(Color.WHITE);
        }else{
            manufacturedYrJTextField.setBackground(Color.RED);
        }
    }//GEN-LAST:event_manufacturedYrJTextFieldKeyReleased

    private void seatCapacitySelectedJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_seatCapacitySelectedJTextFieldKeyReleased
        // TODO add your handling code here:
        if(isSeatCapacityValid()){
            seatCapacitySelectedJTextField.setBackground(Color.WHITE);
        }else{
            seatCapacitySelectedJTextField.setBackground(Color.RED);
        }
    }//GEN-LAST:event_seatCapacitySelectedJTextFieldKeyReleased

    private void modelNoJTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_modelNoJTextField1KeyReleased
        // TODO add your handling code here:
        if(isModelNoValid()){
            modelNoJTextField1.setBackground(Color.WHITE);
        }else{
            modelNoJTextField1.setBackground(Color.RED);
        }
    }//GEN-LAST:event_modelNoJTextField1KeyReleased

    private void manufacturedYrTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_manufacturedYrTextFieldKeyReleased
        // TODO add your handling code here:
        if(isSearchedManufacturedYrValid()){
            manufacturedYrTextField.setBackground(Color.WHITE);
        }else{
            manufacturedYrTextField.setBackground(Color.RED);
        }
    }//GEN-LAST:event_manufacturedYrTextFieldKeyReleased

    private void serialNoJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_serialNoJTextFieldKeyReleased
        // TODO add your handling code here:
        if(isSearchedSerialNoValid()){
            serialNoJTextField.setBackground(Color.WHITE);
        }else{
            serialNoJTextField.setBackground(Color.RED);
        }
    }//GEN-LAST:event_serialNoJTextFieldKeyReleased

    private void seatCapacityJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_seatCapacityJTextFieldKeyReleased
        // TODO add your handling code here:
        if(isSeatMinValid()){
            seatCapacityJTextField.setBackground(Color.WHITE);
        }else{
            seatCapacityJTextField.setBackground(Color.RED);
        }
    }//GEN-LAST:event_seatCapacityJTextFieldKeyReleased

    private void seatCapacityMaxJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_seatCapacityMaxJTextFieldKeyReleased
        // TODO add your handling code here:
        if(isSeatMaxValid()){
            seatCapacityMaxJTextField.setBackground(Color.WHITE);
        }else{
            seatCapacityMaxJTextField.setBackground(Color.RED);
        }
    }//GEN-LAST:event_seatCapacityMaxJTextFieldKeyReleased

    private void modelNoJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_modelNoJTextFieldKeyReleased
        // TODO add your handling code here:
        if(isSearchedModelNoValid()){
            modelNoJTextField.setBackground(Color.WHITE);
        }else{
            modelNoJTextField.setBackground(Color.RED);
        }
    }//GEN-LAST:event_modelNoJTextFieldKeyReleased

    private void limitJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_limitJTextFieldKeyReleased
        // TODO add your handling code here:
        if(isLimitValid()) {
            limitJTextField.setBackground(Color.WHITE);
        }else{
            limitJTextField.setBackground(Color.RED);
        }
    }//GEN-LAST:event_limitJTextFieldKeyReleased
    
    private boolean isModelNoValid() {
        
        String modelNo = modelNoJTextField1.getText().replace(" ", "");
        if(modelNo.isBlank() || !modelNo.matches("^[A-Za-z0-9]*$")){
            return false;
        }
        return true;
    }
    
    private boolean isSearchedModelNoValid() {
        
        String modelNo = modelNoJTextField.getText().replace(" ", "");
        if(modelNo.isBlank()){
            return true;
        }
        if(!modelNo.matches("^[A-Za-z0-9]*$")){
            return false;
        }
        return true;
    }

    private boolean isLimitValid() {
        
        String limit = limitJTextField.getText().replace(" ", "");
        if(limit.isBlank()){
            return true;
        }
        try {
            
            Integer year = Integer.valueOf(limit);
            if(Integer.compare(year, 0) >=0 ){
                return true;
            }
            return false;
            
        } catch (Exception e) {
            return false;
        }
    }
    
    private boolean isSeatCapacityValid() {
        
        String seats = seatCapacitySelectedJTextField.getText().replace(" ", "");
        if(seats.isBlank()){
            return false;
        }
        try{
            Integer seatCapacity = Integer.valueOf(seats);
            if(Integer.compare(seatCapacity, 0) > 0){
                return true;
            }
            return false;
        }catch (Exception e){
            return false;
        }
    }    
    
    private boolean isManufacturedYrValid() {
        
        String manufacturedYr = manufacturedYrJTextField.getText().replace(" ", "");
        if(manufacturedYr.isBlank()){
            return false;
        }
        try {
            Integer year = Integer.valueOf(manufacturedYr);
            if(Integer.compare(year, 0) >0 && Integer.compare(2022, year) > 0){
                return true;
            }
            return false;
        } catch (Exception e){
            return false;
        }
    }
    
    private boolean isSearchedManufacturedYrValid() {
        
        String manufacturedYr = manufacturedYrTextField.getText().replace(" ", "");
        if(manufacturedYr.isBlank()){
            return true;
        }
        try {
            Integer year = Integer.valueOf(manufacturedYr);
            if(Integer.compare(year, 0) >0 && Integer.compare(2022, year) > 0){
                return true;
            }
            return false;
        } catch (Exception e){
            return false;
        }
    }
    
    private boolean isSeatMinValid() {
        
        String seatMin = seatCapacityJTextField.getText().replace(" ", "");
        if(seatMin.isBlank()){
            return true;
        }
        try {
            
            Integer year = Integer.valueOf(seatMin);
            if(Integer.compare(year, 0) >=0 ){
                return true;
            }
            return false;
            
        } catch (Exception e) {
            return false;
        }
    }
    
    private boolean isSeatMaxValid() {
        
        String seatMax = seatCapacityMaxJTextField.getText().replace(" ", "");
        if(seatMax.isBlank()){
            return true;
        }
        try {
            
            Integer year = Integer.valueOf(seatMax);
            if(Integer.compare(year, 0) >=0 ){
                return true;
            }
            return false;
            
        } catch (Exception e) {
            return false;
        }
    }    
    
    private boolean isDistanceValid() {
        
        String distance = currentDistanceJTextField.getText().replace(" ", "");
        if(distance.isBlank()){
            return false;
        }
        try{
            Double distanceValue = Double.valueOf(distance);
            if(Double.compare(distanceValue, 0) >0){
                return true;
            }else{
                return false;
            }
        }catch(Exception e){
            return false;
        }
    } 
    
    private boolean isSearchedSerialNoValid() {
        
        String serialNo = serialNoJTextField.getText().replace(" ", "");
        if(serialNo.isBlank()){
            return true;
        }
        if(!serialNo.matches("^[A-Za-z0-9]*$")){
            return false;
        }
        return true;
    }
  
    private boolean isSerialNoValid() {
        
        String serialNo = serialNoJTextField1.getText().replace(" ", "");
        if(serialNo.isBlank() || !serialNo.matches("^[A-Za-z0-9]*$")){
            return false;
        }
        if(isSerialNounique()){
            return true;
        }
        return false;
    }   
    
    private boolean isSerialNounique() {
        
        boolean serianNoUnique = true;
        int userSelectedIndex = viewCarsTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) viewCarsTable.getModel();        
        Car userSelectedCar = (Car) model.getValueAt(userSelectedIndex,0);
        if(userSelectedCar.getSerialNumber().contentEquals(serialNoJTextField1.getText().replace(" ", ""))){
            return serianNoUnique;
        }
        for(Car car:carsInformation.getCars()){
            if(car.getSerialNumber().contentEquals(serialNoJTextField1.getText().replace(" ", ""))){
                serianNoUnique = false;
            }
        }
        
        return serianNoUnique;
    }
    
    private void setUpdatedData(){
        
        int userSelectedIndex = viewCarsTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) viewCarsTable.getModel();        
        Car userSelectedCar = (Car) model.getValueAt(userSelectedIndex,0);
        
        userSelectedCar.setAvailability(availabilityJCheckBox.isSelected());
        userSelectedCar.setDistanceFromUser(Double.valueOf(currentDistanceJTextField.getText()));
        userSelectedCar.setManufacturer(Manufacturer.valueOf((String) manufactureJComboBox.getSelectedItem()));
        userSelectedCar.setManufacturedYear(manufacturedYrJTextField.getText());
        userSelectedCar.setModelNumber(modelNoJTextField1.getText());
        userSelectedCar.setOperatingCity(City.valueOf((String) operatingCityJComboBox.getSelectedItem()));
        userSelectedCar.setMaintainanceCertificateExpired(maintainanceExpiryJCheckBox.isSelected());
        userSelectedCar.setSeatCapacity(Integer.valueOf(seatCapacitySelectedJTextField.getText()));
        userSelectedCar.setSerialNumber(serialNoJTextField1.getText());
        userSelectedCar.setLeaseType(LeaseType.valueOf((String) leaseTypeSelectedJComboBox.getSelectedItem()));
        userSelectedCar.setLastUpdated(new Date());
        carsInformation.setLastUpdatedOn(new Date());

    }
    
    private boolean isDataUpdatedByUser(){
        //TODO
        int userSelectedIndex = viewCarsTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) viewCarsTable.getModel();        
        Car userSelectedCar = (Car) model.getValueAt(userSelectedIndex,0);
        return userSelectedCar.objectEqualityCheck(Double.valueOf(currentDistanceJTextField.getText().replace(" ","")), availabilityJCheckBox.isSelected(), 
                Manufacturer.valueOf((String) manufactureJComboBox.getSelectedItem()), manufacturedYrJTextField.getText().replace(" ", ""), 
                Integer.valueOf(seatCapacitySelectedJTextField.getText().replace(" ","")), serialNoJTextField1.getText().replace(" ",""), modelNoJTextField1.getText().replace(" ",""), 
                City.valueOf((String) operatingCityJComboBox.getSelectedItem()), maintainanceExpiryJCheckBox.isSelected(),
                LeaseType.valueOf((String) leaseTypeSelectedJComboBox.getSelectedItem()));
    }
    
    private void deleteSelectedCarData(int userSelectedIndex) {
        
        userSelectedJPanel.setVisible(false);
        DefaultTableModel model = (DefaultTableModel) viewCarsTable.getModel();
        Car userSelectedCar = (Car) model.getValueAt(userSelectedIndex,0);
        carsInformation.remove(userSelectedCar);
        searchJButtonActionPerformed(null);
        JOptionPane.showMessageDialog(this, "Successfully Deleted the Car details");
    }
    
    private void displaySelectedCarData(int userSelectedIndex){
        
        userSelectedJPanel.setVisible(true);
        DefaultTableModel model = (DefaultTableModel) viewCarsTable.getModel();
        Car userSelectedCar = (Car) model.getValueAt(userSelectedIndex,0);
        setDataInUI(userSelectedCar);
        
    }
    
    private void setDataInUI(Car car) {
        
        currentDistanceJTextField.setText(String.valueOf(car.getDistanceFromUser()));
        seatCapacitySelectedJTextField.setText(String.valueOf(car.getSeatCapacity()));
        manufacturedYrJTextField.setText(car.getManufacturedYear());
        serialNoJTextField1.setText(car.getSerialNumber());
        modelNoJTextField1.setText(car.getModelNumber());
        if(car.isAvailability()){
            availabilityJCheckBox.setSelected(true);
        }else{
            availabilityJCheckBox.setSelected(false);
        }
        if(car.isMaintainanceCertificateExpired()){
            maintainanceExpiryJCheckBox.setSelected(true);
        }else{
            maintainanceExpiryJCheckBox.setSelected(false);
        }
        
        initializeUIDefaultvalues();
        
        manufactureJComboBox.setSelectedItem(car.getManufacturer().name());
        operatingCityJComboBox.setSelectedItem(car.getOperatingCity().name());
        leaseTypeSelectedJComboBox.setSelectedItem(car.getLeaseType().name());
        
    }
    
    private void initializeUIDefaultvalues(){
        
        manufactureJComboBox.removeAllItems();
        String[] manufacturers = Manufacturer.getManufactureArray();
        for(String manufacturer:manufacturers){
            manufactureJComboBox.addItem(manufacturer);
        }
        
        operatingCityJComboBox.removeAllItems();
        String[] operatingCities = City.getOperatingCitiesArray();
        for(String city:operatingCities){
            operatingCityJComboBox.addItem(city);
        }
        
        leaseTypeSelectedJComboBox.removeAllItems();
        String[] leaseTypes = LeaseType.getAllLeaseTypes();
        for(String leaseType:leaseTypes) {
            leaseTypeSelectedJComboBox.addItem(leaseType);
        }
        
    }   
        
    private void resetFilters() {
        availablilityJComboBox.setSelectedIndex(0);
        manufacturedYrTextField.setText("");
        manufactureJList.clearSelection();
        seatCapacityJTextField.setText("");
        serialNoJTextField.setText("");
        modelNoJTextField.setText("");
        cityJComboBox.setSelectedIndex(0);
        maintainanceJComboBox.setSelectedIndex(0);
        distanceJCheckBox.setSelected(false);
        limitJTextField.setText("");
        leaseTypeJComboBox.setSelectedIndex(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox availabilityJCheckBox;
    private javax.swing.JLabel availabilityJLabel;
    private javax.swing.JLabel availabilityJLabel1;
    private javax.swing.JComboBox<String> availablilityJComboBox;
    private javax.swing.JComboBox<String> cityJComboBox;
    private javax.swing.JLabel countDataJLabel;
    private javax.swing.JLabel countJLabel;
    private javax.swing.JLabel currentDistanceJLabel;
    private javax.swing.JTextField currentDistanceJTextField;
    private javax.swing.JButton deleteJButton;
    private javax.swing.JCheckBox distanceJCheckBox;
    private javax.swing.JLabel distanceJLabel;
    private javax.swing.JLabel filterHeaderDisplayJLabel;
    private javax.swing.JLabel filteredLastUpdatedJTextField;
    private javax.swing.JLabel fleetUpdatedJLabel;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lastUpdatedFilteredJLabel;
    private javax.swing.JComboBox<String> leaseTypeJComboBox;
    private javax.swing.JLabel leaseTypeJLabel;
    private javax.swing.JComboBox<String> leaseTypeSelectedJComboBox;
    private javax.swing.JLabel leaseTypeSelectedJLabel;
    private javax.swing.JLabel limitJLabel;
    private javax.swing.JTextField limitJTextField;
    private javax.swing.JLabel maintainanceExperiedJLabel;
    private javax.swing.JCheckBox maintainanceExpiryJCheckBox;
    private javax.swing.JComboBox<String> maintainanceJComboBox;
    private javax.swing.JComboBox<String> manufactureJComboBox;
    private javax.swing.JList<String> manufactureJList;
    private javax.swing.JLabel manufacturedYrJLabel;
    private javax.swing.JLabel manufacturedYrJLabel1;
    private javax.swing.JTextField manufacturedYrJTextField;
    private javax.swing.JTextField manufacturedYrTextField;
    private javax.swing.JLabel manufacturerJLabel;
    private javax.swing.JLabel manufacturerJLabel1;
    private javax.swing.JLabel modelNoJLabel;
    private javax.swing.JTextField modelNoJTextField;
    private javax.swing.JTextField modelNoJTextField1;
    private javax.swing.JComboBox<String> operatingCityJComboBox;
    private javax.swing.JLabel operatingCityJLabel;
    private javax.swing.JButton resetJButton1;
    private javax.swing.JButton searchJButton;
    private javax.swing.JLabel seatCapacityJLabel;
    private javax.swing.JLabel seatCapacityJLabel1;
    private javax.swing.JTextField seatCapacityJTextField;
    private javax.swing.JLabel seatCapacityMaxJLabel;
    private javax.swing.JTextField seatCapacityMaxJTextField;
    private javax.swing.JTextField seatCapacitySelectedJTextField;
    private javax.swing.JLabel serialNoJLabel;
    private javax.swing.JLabel serialNoJLabel1;
    private javax.swing.JLabel serialNoJLabel2;
    private javax.swing.JTextField serialNoJTextField;
    private javax.swing.JTextField serialNoJTextField1;
    private javax.swing.JButton updateJButton;
    private javax.swing.JPanel userSelectedJPanel;
    private javax.swing.JTable viewCarsTable;
    private javax.swing.JButton viewJButton;
    // End of variables declaration//GEN-END:variables
}
